
//code proposer 15-10-25 14.09
// JS/actions/ActivityAction.js
import { 
    LOAD_Auth, 
    FAIL_AUTH,
    SUCCESS_Auth,
    EDIT_USER
} from "../actionTypes/AuthActionType"
import axios from 'axios'

const getConfig = () => ({
    headers: {
        authorization: localStorage.getItem("token")
    }
})

// ‚úÖ Action pour les activit√©s filtr√©es
export const getFilteredActivities = (page = 1, limit = 20, filters = {}) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const queryParams = new URLSearchParams({
            page: page.toString(),
            limit: limit.toString(),
            ...filters
        });

        console.log('üü¢ GET FILTERED ACTIVITIES - Filters:', filters);

        const result = await axios.get(
            `/api/activity/filtered?${queryParams}`, 
            getConfig()
        );
        
        console.log('‚úÖ ACTIVIT√âS FILTR√âES CHARG√âES:', result.data.activities?.length);
        
        dispatch({
            type: SUCCESS_Auth, 
            payload: {
                activities: result.data.activities,
                pagination: result.data.pagination,
                count: result.data.count,
                filters: result.data.filters,
                isAuth: true
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR CHARGEMENT ACTIVIT√âS FILTR√âES:', error.response?.data);
        dispatch({
            type: FAIL_AUTH, 
            payload: error.response?.data?.errors || [{ msg: 'Erreur de chargement des activit√©s filtr√©es' }]
        });
        throw error;
    }
};

// ‚úÖ Action de recherche avanc√©e
export const searchActivities = (searchParams) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const queryParams = new URLSearchParams();
        
        Object.keys(searchParams).forEach(key => {
            if (searchParams[key] !== undefined && searchParams[key] !== '') {
                queryParams.append(key, searchParams[key]);
            }
        });

        console.log('üü¢ SEARCH ACTIVITIES - Params:', searchParams);

        const result = await axios.get(
            `/api/activity/search?${queryParams}`, 
            getConfig()
        );
        
        console.log('‚úÖ RECHERCHE EFFECTU√âE:', result.data.activities?.length);
        
        dispatch({
            type: SUCCESS_Auth, 
            payload: {
                activities: result.data.activities,
                pagination: result.data.pagination,
                count: result.data.count,
                search: result.data.search,
                isAuth: true
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR RECHERCHE ACTIVIT√âS:', error.response?.data);
        dispatch({
            type: FAIL_AUTH, 
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de la recherche' }]
        });
        throw error;
    }
};

// ‚úÖ CORRECTION COMPL√àTE : Action createActivity
export const createActivity = (activityData, navigate) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        console.log('üü¢ ACTION CREATE ACTIVITY: D√©marrage avec:', activityData);
        
        // ‚úÖ FORMATAGE des donn√©es pour le backend
        const formattedData = {
            general_activity: activityData.general_activity,
            activity_type: activityData.activity_type,
            start_date: activityData.start_date,
            start_time: activityData.start_time,
            end_date: activityData.end_date,
            end_time: activityData.end_time,
            activity_subject: activityData.activity_subject,
            description: activityData.description,
            notes: activityData.notes,
            visibility: activityData.visibility,
            identified_users_ids: activityData.identified_users_ids || [],
            uploads: activityData.uploads || []
        };

        console.log('üì§ DONN√âES FORMAT√âES POUR ENVOI:', formattedData);

        const result = await axios.post("/api/activity/", formattedData, getConfig());
        console.log('‚úÖ ACTION CREATE ACTIVITY: R√©ponse serveur:', result.data);
        
        dispatch({
            type: SUCCESS_Auth, 
            payload: {
                activity: result.data.activity,
                success: [{msg: "Activit√© cr√©√©e avec succ√®s!"}],
                isAuth: true
            }
        });
        
        if (navigate) {
            navigate('/activities');
        }
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ACTION CREATE ACTIVITY: Erreur d√©taill√©e:', {
            message: error.message,
            response: error.response?.data,
            status: error.response?.status
        });
        
        const errorMessage = error.response?.data?.errors || 
                           error.response?.data?.message || 
                           [{ msg: 'Erreur de cr√©ation d\'activit√©' }];
        
        dispatch({
            type: FAIL_AUTH, 
            payload: errorMessage
        });
        throw error;
    }
}


// ‚úÖ CORRECTION : Action updateActivity - URL CORRIG√âE
export const updateActivity = (activityId, activityData) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        console.log('üîÑ ACTION UPDATE ACTIVITY: D√©marrage avec:', { activityId, activityData });
        
        // ‚úÖ CORRECTION : URL CORRECTE selon vos routes
        const result = await axios.put(
            `/api/activity/${activityId}`, // ‚úÖ CORRECT : /api/activity/:id
            activityData, 
            getConfig()
        );
        
        console.log('‚úÖ ACTION UPDATE ACTIVITY: R√©ponse serveur:', result.data);
        
        dispatch({
            type: SUCCESS_Auth, 
            payload: {
                activity: result.data.activity,
                success: [{msg: "Activit√© modifi√©e avec succ√®s!"}],
                isAuth: true
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ACTION UPDATE ACTIVITY: Erreur d√©taill√©e:', {
            message: error.message,
            response: error.response?.data,
            status: error.response?.status
        });
        
        const errorMessage = error.response?.data?.errors || 
                           error.response?.data?.message || 
                           [{ msg: 'Erreur de modification d\'activit√©' }];
        
        dispatch({
            type: FAIL_AUTH, 
            payload: errorMessage
        });
        throw error;
    }
}


// ‚úÖ CORRECTION COMPL√àTE : Action replyToComment
export const replyToComment = (activityId, commentId, replyData) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        console.log('üü¢ ACTION REPLY TO COMMENT:', { activityId, commentId, replyData });
        
        const result = await axios.post(
            `/api/activity/${activityId}/comments/${commentId}/reply`,
            replyData,
            getConfig()
        );
        
        console.log('‚úÖ R√âPONSE AJOUT√âE:', result.data);
        
        dispatch({
            type: 'REPLY_TO_COMMENT_SUCCESS',
            payload: {
                activityId,
                commentId,
                reply: result.data.reply
            }
        });
        
        return result.data;
    } catch (error) {
        console.error('‚ùå ERREUR R√âPONSE:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de la r√©ponse' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION COMPL√àTE : Action likeComment
export const likeComment = (activityId, commentId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        console.log('üü¢ ACTION LIKE COMMENT:', { activityId, commentId });
        
        const result = await axios.post(
            `/api/activity/${activityId}/comments/${commentId}/like`,
            {},
            getConfig()
        );
        
        console.log('‚úÖ LIKE COMMENTAIRE:', result.data);
        
        dispatch({
            type: 'LIKE_COMMENT_SUCCESS',
            payload: {
                activityId,
                commentId,
                likes: result.data.comment.likes,
                userHasLiked: result.data.comment.userHasLiked
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR LIKE COMMENTAIRE:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors du like du commentaire' }]
        });
        throw error;
    }
}



// ‚úÖ CORRECTION : Action likeReply
export const likeReply = (activityId, commentId, replyId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.post(
            `/api/activity/${activityId}/comments/${commentId}/replies/${replyId}/like`,
            {},
            getConfig()
        );
        
        console.log('‚úÖ LIKE R√âPONSE:', result.data);
        
        dispatch({
            type: EDIT_USER,
            payload: {
                activityId,
                commentId,
                replyId,
                likes: result.data.reply.likes,
                userHasLiked: result.data.reply.userHasLiked
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR LIKE R√âPONSE:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors du like de la r√©ponse' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION : Action addComment
export const addComment = (activityId, commentData) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.post(
            `/api/activity/${activityId}/comment`, 
            commentData, 
            getConfig()
        );
        
        console.log('‚úÖ COMMENTAIRE AJOUT√â:', result.data);
        
        dispatch({
            type: EDIT_USER,
            payload: {
                activityId: activityId,
                comment: result.data.comment
            }
        });
        
        return result.data;
    } catch (error) {
        console.error('‚ùå ERREUR COMMENTAIRE:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur d\'ajout de commentaire' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION : Action likeActivity
export const likeActivity = (activityId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.post(
            `/api/activity/${activityId}/like`, 
            {}, 
            getConfig()
        );
        
        console.log('‚úÖ LIKE ACTIVIT√â:', result.data);
        
        dispatch({
            type: EDIT_USER, 
            payload: {
                activityId: activityId,
                activity: result.data.activity
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR LIKE ACTIVIT√â:', error.response?.data);
        dispatch({
            type: FAIL_AUTH, 
            payload: error.response?.data?.errors || [{ msg: 'Erreur de like' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION : Action getAllActivities
export const getAllActivities = (page = 1, limit = 10) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.get(
            `/api/activity/all?page=${page}&limit=${limit}`, 
            getConfig()
        );
        
        console.log('‚úÖ ACTIVIT√âS CHARG√âES:', result.data.activities?.length);
        
        dispatch({
            type: SUCCESS_Auth, 
            payload: {
                activities: result.data.activities,
                pagination: result.data.pagination,
                count: result.data.count,
                isAuth: true
            }
        });
        
    } catch (error) {
        console.error('‚ùå ERREUR CHARGEMENT ACTIVIT√âS:', error.response?.data);
        dispatch({
            type: FAIL_AUTH, 
            payload: error.response?.data?.errors || [{ msg: 'Erreur de chargement des activit√©s' }]
        });
    }
}

// ‚úÖ CORRECTION : Action getUserActivities
export const getUserActivities = (userId, page = 1, limit = 10) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.get(
            `/api/activity/user/${userId}?page=${page}&limit=${limit}`, 
            getConfig()
        );
        
        dispatch({
            type: SUCCESS_Auth, 
            payload: {
                activities: result.data.activities,
                pagination: result.data.pagination,
                count: result.data.count,
                isAuth: true
            }
        });
        
    } catch (error) {
        console.error('‚ùå ERREUR ACTIVIT√âS UTILISATEUR:', error.response?.data);
        dispatch({
            type: FAIL_AUTH, 
            payload: error.response?.data?.errors || [{ msg: 'Erreur de chargement des activit√©s utilisateur' }]
        });
    }
}

export const deleteActivity = (activityId) => async (dispatch) => {
    try {
        console.log('üóëÔ∏è DELETE ACTIVITY ACTION - ID:', activityId);
        
        dispatch({
            type: LOAD_Auth
        });

        const config = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': localStorage.getItem('token')
            }
        };

        // ‚úÖ CORRECTION : Utiliser la bonne URL selon vos routes
        const res = await axios.delete(`/api/activity/${activityId}`, config);
        
        console.log('‚úÖ ACTIVIT√â SUPPRIM√âE:', res.data);

        dispatch({
            type: SUCCESS_Auth,
            payload: res.data
        });

        // Recharger les activit√©s apr√®s suppression
        dispatch(getFilteredActivities(1, 20, { viewMode: 'all' }));

    } catch (error) {
        console.error('‚ùå ERREUR SUPPRESSION ACTIVIT√â:', error.response?.data || error.message);
        
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de la suppression' }]
        });
    }
};

// ‚úÖ CORRECTION : Action getUsersForMention
export const getUsersForMention = () => async (dispatch) => {
    try {
        const result = await axios.get(
            "/api/activity/mention/users", 
            getConfig()
        );
        
        console.log('‚úÖ UTILISATEURS POUR MENTION:', result.data.users?.length);
        
        return result.data.users;
        
    } catch (error) {
        console.error('‚ùå ACTION GET USERS MENTION: Erreur', error.response?.data);
        throw error;
    }
}

// ‚úÖ CORRECTION : Action deleteComment
export const deleteComment = (activityId, commentId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.delete(
            `/api/activity/${activityId}/comments/${commentId}`,
            getConfig()
        );
        
        console.log('‚úÖ COMMENTAIRE SUPPRIM√â:', result.data);
        
        dispatch({
            type: EDIT_USER,
            payload: {
                activityId,
                commentId,
                success: result.data.success
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR SUPPRESSION COMMENTAIRE:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de la suppression du commentaire' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION : Action deleteReply
export const deleteReply = (activityId, commentId, replyId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.delete(
            `/api/activity/${activityId}/comments/${commentId}/replies/${replyId}`,
            getConfig()
        );
        
        console.log('‚úÖ R√âPONSE SUPPRIM√âE:', result.data);
        
        dispatch({
            type: EDIT_USER,
            payload: {
                activityId,
                commentId,
                replyId,
                success: result.data.success
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR SUPPRESSION R√âPONSE:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de la suppression de la r√©ponse' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION : Action getActivityById
export const getActivityById = (activityId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.get(
            `/api/activity/${activityId}`,
            getConfig()
        );
        
        console.log('‚úÖ ACTIVIT√â PAR ID:', result.data);
        
        dispatch({
            type: SUCCESS_Auth,
            payload: {
                activity: result.data.activity,
                isAuth: true
            }
        });
        
        return result.data.activity;
        
    } catch (error) {
        console.error('‚ùå ERREUR ACTIVIT√â PAR ID:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de la r√©cup√©ration de l\'activit√©' }]
        });
        throw error;
    }
}

// ‚úÖ CORRECTION : Action addIdentifiedUser
export const addIdentifiedUser = (activityId, userId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.post(
            `/api/activity/${activityId}/identified-users`,
            { userId },
            getConfig()
        );
        
        console.log('‚úÖ UTILISATEUR IDENTIFI√â AJOUT√â:', result.data);
        
        dispatch({
            type: EDIT_USER,
            payload: {
                activityId: activityId,
                activity: result.data.activity
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR AJOUT UTILISATEUR IDENTIFI√â:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors de l\'ajout de l\'utilisateur identifi√©' }]
        });
        throw error;
    }
};

// ‚úÖ CORRECTION : Action removeIdentifiedUser
export const removeIdentifiedUser = (activityId, userId) => async (dispatch) => {
    dispatch({ type: LOAD_Auth });
    try {
        const result = await axios.delete(
            `/api/activity/${activityId}/identified-users/${userId}`,
            getConfig()
        );
        
        console.log('‚úÖ UTILISATEUR IDENTIFI√â RETIR√â:', result.data);
        
        dispatch({
            type: EDIT_USER,
            payload: {
                activityId: activityId,
                activity: result.data.activity
            }
        });
        
        return result.data;
        
    } catch (error) {
        console.error('‚ùå ERREUR RETRAIT UTILISATEUR IDENTIFI√â:', error.response?.data);
        dispatch({
            type: FAIL_AUTH,
            payload: error.response?.data?.errors || [{ msg: 'Erreur lors du retrait de l\'utilisateur identifi√©' }]
        });
        throw error;
    }
};

// ‚úÖ CORRECTION : Action clearActivityErrors
export const clearActivityErrors = () => (dispatch) => {
    dispatch({
        type: FAIL_AUTH,
        payload: []
    });
}

// ‚úÖ CORRECTION : Action clearActivitySuccess
export const clearActivitySuccess = () => (dispatch) => {
    dispatch({
        type: SUCCESS_Auth,
        payload: {
            success: [],
            isAuth: true
        }
    });
} 
